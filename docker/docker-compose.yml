version: '3.8'

services:
  homeassistant:
    container_name: turtle-homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    restart: unless-stopped
    privileged: true
    network_mode: host
    volumes:
      - ../config/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    devices:
      # TEMPerHUM USB sensor
      - /dev/bus/usb:/dev/bus/usb
      # Arducam USB camera
      - /dev/video0:/dev/video0
      # Sonoff Zigbee dongle
      - /dev/ttyACM0:/dev/ttyACM0
      - /dev/ttyUSB0:/dev/ttyUSB0
    environment:
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=homeassistant"

  # Zigbee2MQTT for Zigbee device management
  zigbee2mqtt:
    container_name: turtle-zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    restart: unless-stopped
    privileged: true
    network_mode: host
    volumes:
      - ../config/zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
      - /dev/ttyUSB0:/dev/ttyUSB0
    environment:
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=zigbee2mqtt"

  # MQTT Broker for device communication
  mosquitto:
    container_name: turtle-mosquitto
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ../config/mosquitto/config:/mosquitto/config
      - ../config/mosquitto/data:/mosquitto/data
      - ../config/mosquitto/log:/mosquitto/log
    environment:
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=mosquitto"

  # InfluxDB for time-series data storage
  influxdb:
    container_name: turtle-influxdb
    image: influxdb:2.7
    restart: unless-stopped
    ports:
      - "8086:8086"
    volumes:
      - ../config/influxdb:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=turtle123
      - DOCKER_INFLUXDB_INIT_ORG=turtle-enclosure
      - DOCKER_INFLUXDB_INIT_BUCKET=turtle-data
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=influxdb"

  # Grafana for data visualization
  grafana:
    container_name: turtle-grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ../config/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=turtle123
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=grafana"

  # Node-RED for advanced automations
  nodered:
    container_name: turtle-nodered
    image: nodered/node-red:latest
    restart: unless-stopped
    ports:
      - "1880:1880"
    volumes:
      - ../config/nodered:/data
    environment:
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=nodered"

  # Watchtower for automatic container updates
  watchtower:
    container_name: turtle-watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 2 * * *
      - TZ=America/New_York
    labels:
      - "com.docker.compose.project=turtle-enclosure"
      - "com.docker.compose.service=watchtower"

networks:
  default:
    name: turtle-network
    driver: bridge 